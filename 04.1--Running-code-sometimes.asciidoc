== Running code sometimes

There are going to be times when you'll want to run some code _only_ if something is true. Maybe you'll want to print out a different message depending on if someone won or lost a game, or you might want to let a user choose an item from a menu.

If we didn't have the ability to choose whether or not to run some code, our programs wouldn't be very flexible. They wouldn't be able to deal with bad input, and they might only be able to do one thing.

=== Notes for the mentor

In this chapter, we're going to introduce `if` statements as well as the idea of Boolean expressions. 

Honestly, the hardest part of this chapter is often the indentation. Students either forget to indent code to make it a block, or they don't unindent a line so that they can start an `elif` or `else` clause. Be patient and sympathetic, and emphasize that Python really needs them to be precise. 

Precision is hard for many students because, so far, they haven't had to be very precise! They might make a mistake on a spelling test, but that doesn't cause them to fail. Being precise is a habit that they'll soon pick up, so don't worry if you feel like you have to remind them to indent or unindent over and over.

The other thing many students do is use one equal sign (=) rather than two (==) when checking for equality. Many students, when they make this mistake, get screen blindness and _just can't see_ what's wrong. I've found outright telling them rather than quizzing them gets them moving along faster. So, just say "You're missing an equals sign here" rather than "What do you think might be wrong with this line?"

There are times to use the Socratic method, and there are times to remember that Socrates was kind of a jerk.

=== What you need to know...

You should have a good handle on text and numbers. If you don't know what a float, integer, or string is, go read the last chapter again, or watch the videos for that lesson.

=== Boolean: True and False

In order to decide if you need to do something, you need to decide if a expression is true or not. If an expression is correct, then Python will return `True`. If it isn't, Python will return `False`.

`True` and `False` are special values in Python called *booleans*. Unlike strings and floats and integers, a Boolean can only be one of two things: `True` or `False`. 

Notice that `True` and `False` are capitalized. That's important! That's how you know that Python is talking about a boolean value. Try running the following code:

[source,python]
----
print True
print true
----

The first line worked fine, but the second line got an error, didn't it? That's because `True` is a proper boolean, but Python doesn't know what to do with a `true` that's lower case.

==== Comparing values

We often get boolean values by comparing one or more items to each other. Sometimes, we want to see if two things are equal, while other times, we want to see if one is greater or smaller than the other.

To test if something is equal to another thing, we use two equals signs (==) between the two values. Try the following statements out, and see what Python spits out:

[source,python]
----
>>> 2 == 2
>>> 2 == 3
>>> "Ahmed" == "Ahmed"
>>> "Dominique" == "dominique"
----

You should get something like this:

[source,python]
----
>>> 2 == 2
True
>>> 2 == 3
False
>>> "Ahmed" == "Ahmed"
True
>>> "Dominique" == "dominique"
False
----

With each statement, Python returned either True or False. Notice that Python was super picky about things being equal. The two strings "Dominique" and "dominique" were _close_, but they weren't exactly alike. Python will only return true if the two items are _exactly the same_.

You can also test for inequality, or two things _not_ being alike. To do this, you use an exclamation point and an equal sign (!=). Try the following statements:

[source,python]
----
>>> 2 != 2
>>> 2 != 3
>>> "Ahmed" != "Ahmed"
>>> "Dominique" != "dominique"
----

You should get something like this:

[source,python]
----
>>> 2 != 2
False
>>> 2 != 3
True
>>> "Ahmed" != "Ahmed"
False
>>> "Dominique" != "dominique"
True
----

Compare that to the last bit of code. The results were the exact opposite! Once again, Python is super picky. If two things are even slightly different, then Python will return True when you ask it about inequality. Otherwise, it will return False.

You can also test to see if something is greater than or less than something else. To do this, you use the greater than (>) or less than (<) sign. Try out the following statements:

[source,python]
----
>>> 2 > 3
>>> 2 < 3
>>> 2 > 2
>>> 2 < 2
----

You should get something like this:

[source,python]
----
>>> 2 > 3
False
>>> 2 < 3
True
>>> 2 > 2
False
>>> 2 < 2
False
----

We can also check to see if an item is greater/less than _or equal to_ another item. In math class, you might have used a special symbol ([\>=\]) to do equations where you were worried about something being greater than or equal to another item (or vice versa). You don't have that symbol on your keyboard, though, so instead, we just use the greater than / less than sign paired with an equal sign.

Try these in your shell:

[source,python]
----
>>> 2 >= 3
>>> 2 <= 3
>>> 2 >= 2
>>> 2 <= 2
----

You should get something like this:

[source,python]
----
>>> 2 >= 3
False
>>> 2 <= 3
True
>>> 2 >= 2
True
>>> 2 <= 2
True
----

==== Quiz: What should you get back?

What do you think you'll get back if you type these into your shell? Think about it, then try it out.

[width="50%", options="header"]
|===========================
|Expression | True or False?
|10 > 9     |
|5.0 == 5   |
|2.001 != 2 |
|===========================

==== Testing multiple things

Sometimes, you want to see if more than one thing is true. This is when using the `and` and `or` operators come in handy.

Using `and` is pretty easy. You can use `and` to string together several expressions, and if all of them are true, Python will return True. If even one is false, though, Python will return False.

We do this in the real world, too. Let's say you wanted to buy a rabbit from a pet store. If you go to the shop by me, they check for a few things:

* You have to be at least eighteen years old
* You have to have enough money to buy the rabbit
* You have to have a home for the rabbit at your house (no releasing these bunnies to the woods!)

If any of these things aren't true, you don't get to buy a rabbit. Sorry!

.Sorry everyone! No rabbits for you!
image::images/bunnyproblems.png["Three people trying to get a rabbit: A child, a woman with an empty purse, and a rabbit liberator with a protest sign reading 'Free the bunnies'. Each is told 'No' by an offscreem person."]

Run the following code, and pay attention to what you're asking Python. Which expression is True, and which is False?

[source,python]
----
>>> 1 == 1 and 2 == 2
>>> 2 > 3 and 3 < 4
>>> 4 !=5 and 6 != 6
>>> 5 > 6 and 6 > 7
----

You should get:

[source,python]
----
>>> 1 == 1 and 2 == 2
True
>>> 2 > 3 and 3 < 4
False
>>> 4 !=5 and 6 != 6
False
>>> 5 > 6 and 6 > 7
False
----

The `or` operator can be used to string together a series of expressions where you only care if _one_ of the expressions is true. So, even if you've strung together 100 expressions (please don't do that), if just one out of the 99 is true, Python will return True.

Again, we do this in the real world. Let's say I'm back at the pet shop, but I'm buying dog food. This time, they only check for three things:

* Can I pay with cash?
* Can I pay with a credit or debit card?
* Can I pay with a check?

As long as one those things is true, I can buy my dog food. I might have all of those things, or I might have only one. Either way, I'm good to go.

In this example, the same expressions as the last exercise have been joined together using `or`. Check out what Python returns this time.

[source,python]
----
>>> 1 == 1 or 2 == 2
>>> 2 > 3 or 3 < 4
>>> 4 !=5 or 6 != 6
>>> 5 > 6 or 6 > 7
----

You should get:

[source,python]
----
>>> 1 == 1 or 2 == 2
True
>>> 2 > 3 or 3 < 4
True
>>> 4 !=5 or 6 != 6
True
>>> 5 > 6 or 6 > 7
False
----

==== Quiz: What do you get back?

What do you think you'll get back if you type these into your shell? Think about it, then try it out.

[width="50%", options="header"]
|==============================
|Expression    | True or False?
|True and True |
|False or True |
|True and False|
|False or False|
|==============================

=== Using if statements

Now that we know how to tell if a expression is true or not, let's learn how to run code only _if_ that expression is true! To do that, we'll create an `if` statement.

Here's what a basic if statment looks like:

[source,python]
----
if expression:
    code
    code
    code
----

If the expression in the `if` statement is true, then the indented code beneath the `if` will run. Otherwise, Python will skip over that code. That indented code is called a *block*.

==== What's a block?

In Python, you use blocks quite a bit. It's how we tell Python that a bit of code should run differently. We might want it only to run if something is true, or we might want it to run multiple times. 

You create a block by putting four spaces before your code. If you're working in IDLE, Python should put that space there for you. If you ever happen to work in an editor that doesn't put that space in there for you, you'll have to do it yourself.

Let's play around with an `if` statement. First, run the code and note what happens. Then, try to change the code so that the code under the `if` statment runs.

[source,python]
----
name = "Jay"
if name == "Kareem":
    print "Hey, buddy!"
print "How are you today?"
----

There are a few ways you could make it so "Hey, buddy!" prints out. You could change `name` to "Kareem", or you could change the `if` expression to `name == "Jay"`.

==== Quiz: What will run?

If you run the following code, what will be printed out?

[source,python]
----
num = 3
if num > 5:
    num = num - 2
print num
----

==== Adding in else

Sometimes, you want to run some code if something is true, and run some _other_ code if that thing is false. In that case, we want to add an `else` to our `if` statment.

Here is what a basic `if` statment with an `else` clause looks like:

[source,python]
----
donuts = 3
if donuts < 5:
    print "That's a bunch of donuts"
else:
    print "You're running low on donuts."
----

Run the code and note what happens. We have five donuts, so `donuts > 3` is false. Therefore, the code under the `else` clause is run. Python prints out "You're running low on donuts."

NOTE: Note that the else clause has a block of code, too! Each clause for an `if` statement needs its own block to run!

==== elif: Doing many things!

So far, we can do some code if something is true and something else if it isn't true. What if we want to check for many things? In that case, we can add `elif` clauses to our `if` statment!

When you write an `if` statement with `elif` clauses, Python will run through each Boolean expression, one by one. If one is true, Python will run that code block and skip the rest of the `if` statement. If none of the statements are true, Python will run the code under the `else` clause (if there is one).

Here's an example of an `if` statment with `elif` clauses. Run it, and note what's printed out.

[source,python]
----
player_score = 150
worst_score = 50
best_score = 200

if player_score > best_score:
	print "We have a new high score!"
	best_score = player_score
elif player_score > worst_score:
	print "You did okay..."
else:
	print "Oh man. We have a new worst score."
	worst_score = player_score
----

Notice that Python printed out "You did okay..." That's because the player didn't beat the high score, but also wasn't lower than the worst score.

Try changing the code so that the player beats the best score, and then try changing the player score so it's lower than the worst score. What's printed out each time?

=== Try this!

In IDLE, open up a new file and enter this code:

[source,python]
----
name = "Angel"
print "That name is", len(name), "letters long."

if len(name) > 10:
	print "That's a long name!"
elif len(name) > 5:
	print "That's an average name."
else:
	print "That's a short name!"
----

You don't know what `len()` does, but can you take a guess? Try switching your name for 'Angel'. Can you get Python to print out each of the responses?
