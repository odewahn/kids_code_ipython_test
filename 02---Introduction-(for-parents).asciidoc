== Introduction (for mentors)

I spend a significant amount of time teaching kids to code at conferences and clubs. There, I always run into parents who had wanted their kids to learn to code, but the books on the market seemed to fall short. Some kids showed interest in the idea of programming, but even the most approachable book seemed to lose them after a few chapters.

Why was this happening? I surveyed a few kids (my own son included), and found that the main problem wasn't the books. It was getting stuck.

Kids aren't used to learning skills on their own. Sure, they can effortlessly pick up mounds of information, but when it comes to an actual skill, it seems that they need guidance. Tools stop working, a term doesn't make sense, or the project just seems too large to even think about. My eldest can tell you anything you ever wanted to know about practically any car built in the past fifty years, but that doesn't mean he can build an engine.

This book is meant to be a journey for both you and the student. In fact, I'm going to ask them to pester you now and then. That might be why you're reading this introduction right now: I told them to make sure you read this chapter. This won't be the last time I'll have them come to you, but I promise you, this is going to be a fun journey that the two of you are going to take.

=== Who is this book for?

This book is written for a novice / mentor pair. One of you you should be pretty comfortable with programming. The other doesn't need to know anything at programming at all. 

You, the mentor, don't need to be an expert on everything I'm going to go over. I'm going to be covering some topics that not every developer is familiar with, like building websites and messing around with game libraries. That's okay, though! The chapters that go with these projects should be enough to at least allow you to help your novice troubleshoot.

==== If you don't know Python...

At the end of the book, I have an appendix called Python in Five Minutes. It should get you familiar with how we set variables up and do things like OOP, lists, and hashes (we call them dictonaries). This really should only take you a few minutes to read, and should get you caught up pretty quickly.

Python in Five Minutes also includes some useful search tips, as well as other resources for you to check out.

==== If you don't know how to code...

If you don't know how to code, don't panic! Sure, you'll be starting at a similar place as the novice, but you also probably have more experience with how to reason through problems. Kids stop, but adults usually can muddle their way to a solution.

Read the chapters along with the novice, and maybe even have Python set up on your own machine. Take comfort that each chapter comes with completed code samples for you to check out if you feel totally lost.

=== How to use this book

Each lesson and project has a section for you, the expert. The novice should read the rest of the chapter (or, if you're working with a very young child, you might read it together). 

There are places in each chapter where you can run code in the book itself. Feel free to play with the code. You can't break the book, I promise you! There are also videos and interactive diagrams to help reinforce concepts.

Each lesson comes with a section called "Try this!" Go ahead and try the code samples there. I'll make a few suggestions on how you might want to change the code to make it do different things. There are also going to be bits of broken code to help sharpen troubleshooting skills.

After enough concepts have been explained, there will be a project. The project will use many of the skills the novice has gone over. For most of the projects, I offer some code as a place to start, then encourage them to edit the code to add features to the code.

=== Learning about teaching

Why don't I just give the kids a project to do and tell them to work it out themselves? Because kids often learn better when they have a place to start from. Give them a blank page, and they'll choke. Give them a loop and ask them to make it run a bit longer, they catch on quickly. 

This is actually a popular concept in the psychology of learning. It's called scaffolding.

==== Scaffolding

Scaffolding was first described by Lev Vygotsky. He noticed that children in a rural village were able to create complexly colored fabrics at a young age. He noticed that the elders had a particular way of teaching the youth of the village: they were given tasks that were only slightly outside their current level of ability.

[[vygotsky]]
.Good ol' Lev Vygotsky
image::images/lev.jpg["A portrait of Vygotsky", scale=25]

The child might first help a parent on a loom, threading a row or two, or helping with the spools. Later, they might be given a small loom with a work already in progress and allowed to continue it. Eventually, they would move up to helping with more complex projects, starting their own projects, and eventually doing complex works on their own. Each time, the child was moved only slightly outside of their comfort zone, and always under the eye of an expert.

==== Hands on / Hands off

What the heck does making shawls have to do with learning to programming? Only everything.

The elders above were experts at managing a child's *zome of proximal development*. That's a fancy way of talking about the sweet spot that's just beyond where a student feels comfortable, but can still *almost* complete a task without help. 

So, that's why I give the students a structure to work with. They can play around with code that's already written out, slowly getting comfortable with how it works. Eventually, I assure you, they'll be writing functions and classes like they're nothing. 

The most important way to do this is to understand when you need to be hands on, and when you need to leave the student alone. It would be great if I could give you a specific timetable for when to jump in and when to back off, but this is going to be one of those things you sort out on your own. Each child is different. Some will crave your intervention. Others will only tolerate it when they really can't figure out an error.

If you have to guess (and there will be some guesswork in the beginning), always lean towards being over-involved versus not involved enough, no matter how many eyerolls you get.

==== Managing your expectations (and theirs!)

Managing expectations is critical to averting frustration, both yours and theirs. Some kids come in expecting to write a Minecraft clone, and are distressed when they realize they won't be doing that inside of a week. Some parents are distressed as well when they feel that the lessons are going too slowly. 

Know that I move slowly at first because this is *major stuff* the student is learning. This is a completely foreign concept to most students. Even the most basic of concepts, storing values in variables, can seem weird. Where did the old value go? Why can't I get get that value back after I close down my shell? Why does the variable need to come first? Why can't it start with a number?

So, as we get revved up, be patient, and even more importantly, celebrate small victories. I think developers forget how cool it was the first time we combined a print statement with a variable to get the computer to say something to us. It was cool, though! We were taking a mysterious thing and making it do what we wanted! 

So make sure to comfort the impatient student by pointing out that we *will* be doing cool projects in the near future, and celebrate all the little wins they will have every chapter.

=== The set-up

First, you need to make sure that the student has access to a computer and a quiet space. If the student shares a family computer, it might be a good idea to set up a schedule so that they don't get into the zone, only to be ripped out of it because a sibling has to check Facebook, or a parent has to send an email.

You should also discuss how you want to work through the book together. The older student may just want to show you the finished product, while the younger one may want you to sit side-by-side and work through some of the code samples and projects. Don't be afraid to help! You're there to show off what Python can do as well as answer questions that this book doesn't cover.

They probably won't want to hack for hours on end, so make sure to set realistic goals about when they will be working on the lessons and projects. Young children will probably only be able to sit through twenty minutes at a time, so don't be shy about letting them get up and move around. 

Remember, this is going to be fun! It's not going to be fun if the student isn't into it, so be patient, and be willing to try again later.
