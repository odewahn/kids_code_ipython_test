== First, some basics

Now that we have Python installed and IDLE up and running, let's get Python to do some things! In this chapter, we're going to learn how to work with numbers and text, do some basic math, and store values so we can use them later.

=== Notes for the grown-up

In this chapter, we're going to go over numbers, strings, and math in Python. This is usually a pretty easy chapter for students, but some do get caught up on precision. Every now and then, I get a student who can't understand why Python doesn't just give me 0.5 when I put `1 / 2` in the interpreter. 

You might also run into rounding errors if the student is playing around. To see an example of this, try entering `0.9 + .2 + 5.1` into the interpreter. Most of the time, you'll get `6.199999999999999`. Most students aren't all that interested in talking about the peculiarities of floating point arithmatic, so I just say that Python is doing the math in a way that's faster. 

=== What you need for this chapter

For this chapter, you'll need IDLE up and running. That's it! In future chapters, I might use this space to warn you that we're going to use a concept that we went over earlier. If you're feeling uncertain about anything I mention, do yourself a favor and go do a quick review of that topic before trying out that lesson or project.

=== Let's do some math

Some of the first 'computers' created were made to do math. As long as the human race has been adding one and one, we've been on the hunt for a way to do math so it's easier and more reliable. We came up with new ways of lining up numbers, different annotations, and eventually, we created machines to do the math for us.

Let's get Python to do some math for us! Open up your IDLE interpreter and type in the following:

[source,python]
----
>>> 5 + 5
>>> 6 - 7
>>> 1.2 + 5.9 - 2.3
----

Every time you hit enter, Python should spit the answer back out at you. This is what your intepreter screen should look like.

[source,python]
----
>>> 5 + 5
10
>>> 6 - 7
-2
>>> 1.2 + 5.2
6.4
----

So far, the math in Python looks very similar to the math you do every day. There are a few operators that are different, though, so let's review the ones you're most likely to use.

NOTE: An operator is a symbol like the plus sign (+) or minus sign (-) that let's us tell others what we want to do to two values.

==== The rest of the operators

For the most part, Python uses operators that are pretty familiar to us. Sometimes, though, they've had to use something different. Table X.X shows a list of the operators, what it looks like when you write them out, and what symbol you should use in Python.

.Opeators in Python
|===
|Math operation |Operator when written |Operator in Python |Example

|Addition
| +
| +
| 3 + 3

|Subtraction
| -
| -
| 3 - 3

|Multiplication
| x or a dot (ใป)
| *
| 3 * 3

|Division
| รท
| /
| 3 / 3

|Powers
| Superscript (1^1^)
| ^ (It's above the six)
| 3 ^ 3
|===

There are more operators than these, but just knowing these will still allow you do to quite a bit. If you want to check out other operators, check out Table X.X in the Extra Materials section for a complete listing.

==== Types of numbers

There's more than one kind of number in Python. In school, you probably learned about decimal numbers and whole numbers. In Python, a decimal number is called a *float*, while a whole number is called an *integer*. 

If a number has a decimal point, it's a float. It might have a bunch of numbers after the decimal point (1.3243432532), or it might have a zero (5.0). In any case, however, it's a float.

If a number has no decimal point, it's considered a integer. Even if it's super long (1000000000), it's still considered an integer.

Why do we have two kinds of numbers? Because one is more precise than another. Let's look at a case when this matters. Let's divide one by two. What would you normally expect?

TODO: Active console here

[source,python]
----
>>> 1 / 2
----

When you ran the code, you got zero, didn't you? That's not right! You should have gotten 0.5! What's going on here?

Because you used two integers, Python assumed you wanted an integer back, so it lopped off everything after the decimal point. Computers are very careful to be only as precise as you ask them to be, because precision takes energy. If Python always assumed you wanted to be super precise, your programs would run much more slowly?

So, what do we do if we want precision? Make sure at least one of the numbers in your statement is a decimal. Then, Python will know you want a decimal back! Try changing one of the numbers here to a decimal point so you get 0.5 back instead of 0.

TODO: Active console here

[source,python]
----
>>> 1 / 2
----

=== Storing information

Doing math is all well and good, but if we're going to make a useful program, we're going to have to store information so we can use it over and over, or so we can change a value as time goes on. To do that, we're going to need to create a variable.

To create a variable, all we need to do is give it a name and a value to hold.

[source, python]
----
>>> a = 5
----

If you type the above code into your intepreter, Python doesn't print anything out. That's because *this* time, you told Python what to do with the value! It stored it into the variable `a`. If you type `a` into the interpreter, Python should print out `5`. 

You can think of variables like cups. Cups can hold lots of things. A cup might be empty, or you might fill it with water. You might even change your mind, empty the cup, and fill it with soda. Try the following:

TODO: Interactive

[source,python]
----
>>> a = 5
>>> print a
>>> a = 7
>>> print a
----

When you saved the seven into the variable `a`, the value five was replaced by the seven. Python dumped it out, because you told Python that you no longer needed that value anymore.

==== Rules about naming variables

There are some hard and fast rules about what you should name variables, and there's some guidelines you should keep in mind.

If you do the following things, your program _will not run_:

* Variable names can never start with a number.
* They can only be made of letters, numbers, and underscores (_)
* They can't be too long (how long they can be depends on your computer, but seriously, keep it to under 20 characters)

Here are the guidelines you should follow. Python will still run, but following these will make your code easier for you (and others!) to work with:

* Have descriptive variables! Don't use random words. Use words that describe what you'll be using that variable for.
* Use all lower case letters (there are exceptions, but we'll get into that later)
* If you use more than one word in your variable name, separate the words using underscores (ie. number_of_sandwiches)
* Try not to use a lower case L or upper case O. In some fonts, they look like a one or zero.

==== Quiz time!

It's really important that you understand how to create variables, so take a minute to answer these two questions.

Which variable name will work in Python?

* $mystuff
* all_items
* 1republic
* sale items

I'm going to store an item's price in a variable. What's the _best_ variable name I could use, from the choices below?

* $price
* item_price
* myprice
* apple

=== Storing text

Numbers are great, but you'll probably want to store some text at some point. In Python, we call text "strings." A string might be empty, have just one character, or it might contain all the text from your favorite book!

To create a string, you need to enclose the text with either a set of single or double quotes, like this:

[source, python]
----
>>> animal = "dog"
>>> name = 'Gizmo'
----

Make sure that your quotes match! If you start with a single quote, you have to end with a single quote. The same goes for double quotes.

==== Printing text

We've already been using the print statement, but we haven't really talked about what it does. `print` tells Python to show something on the screen. If you ask Python to print a string, Python will leave out the quotes.

Try running the following commands. Look at the differences.

TODO: Interactive

[source,python]
----
>>> greeting = "Hello"
>>> greeting
>>> print greeting
----

Notice how when we just typed in `greeting`, Python printed out 'Hello' in quotes. But when we said `print greeting`, Python didn't add the quotes in.

Also note that Python printed out each item on its own line. If you don't want Python to move to the next line, then add a comma to the end of your print statement. Try running the following code.

TODO: Interactive

[source,python]
----
print "Hello",
print "world"
----

Both of the items were printed on the same line, weren't they? 

==== Doing math?

You can do math with strings! It's much more limited than doing math with numbers, but there are a few tricks you can do.

You can use the additon operator (+) to join two strings together. Run the following code.

TODO: Interactive

[source,python]
----
name = "Coe"
greeting = "Hi"
print greeting + name
----

You can also store joined strings into a variable, like this:

[source,python]
----
fruit = "apple"
color = "red"
my_fruit = color + fruit
print my_fruit
----

Notice that Python didn't put any spaces between the two strings. That's because we didn't ask it to! In general, programming languages will only do _exactly_ what you ask them to. So, if you want a space, you need to put it in there yourself.

[source,python]
----
fruit = "apple"
color = "red"
my_fruit = color + " " + fruit
print my_fruit
----

You can also multiple a string! Try running this code:

[source,python]
----
print "=" * 50
----

A bunch of equals signs were printed out! When you multiply a string by an integer, Python will print that string out that many times.

=== Try this!

In IDLE, open up a new file and enter the following:

[source,python]
----
first_name = "Kylie"
last_name = "Johnston"
time = "morning"

greeting = "Good" + " " + time + " " + first_name + " " + last_name

print greeting
----

Can you change the code so Python says good afternoon to you? 