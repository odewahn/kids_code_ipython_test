== Grouping values: Dictionaries and lists

So far, when we've saved been saving one value to one variable. So, we might save how much something costs to a variable called `price`, or we might save the title of a book to a variable called `title`. 

But what if we want to group some values together? I might want to save all the names of students to a variable called `classroom`. I also might want to save a list of words and definitions to a variable called `vocabulary`. Does Python have some data types that can do these things? Yes! They're called *lists* and *dictionaries*.

=== What you need to know...

This chapter is going to use loops quite a bit, so make sure that you're familiar with them before we move on. If you need a refresher, check out the loops video.

=== Notes for the mentor

In this lesson, we're going to start going over more complex data types. Even though lists and dictionaries are more complex than strings and integers, I find most students grasp the concept pretty quickly.

The harder part for many students is understanding indexes. Counting from zero confuses many new programmers, especially since there's not many pat answers as to why we don't start at one like we do everywhere else. I usually tell students that we start at zero because, at one point, it was the best option. Most students accept this, because, well, they're used to arbitrary answers. After all, "because I said so," is something most students have heard more than once!

If the student is really interested, though, here are some non-expert resources for exploring this question further:

TODO

We're also going to be using methods in this lesson. Some students have trouble with the format and will try to do something like this:

[source,python]
----
my_list = [1, 2, 3]

my_list append(5)
----

Just remind them that they need a period between the variable name and the method we're using. Don't dive too deeply into what, exactly, a method is. We'll be going over that in our OOP chapter.

=== Lists

We're going to go over two new data types in this lesson, starting with lists. 

Lists in Python are just like lists in real life! People make lists all the time: shopping lists, directions to a place, steps to create something. *Lists* are simply a collection of values, saved to one variable.

In Python, the values in a list are contained in a pair of square brackets (`[ ]`). You'll find these brackets at the end of the first row of letters on your keyboard. Let's make a few lists.

[source,python]
----
my_nums = [1, 2, 3, 4]
animals = ["beta fish", "dog", "cat", "llama"]
print my_nums
print my_names
----

Note that each value is separated by a comma, and all the values are inside of the pair of square brackets. If you use anything other than square brackets, or if you forget the commas, your program may throw an error or work strangely.

==== What's an index?

Every item in your list has a place in line. That place is called its *index*. We use the index to get that item out of the list or change it.

Indexes start at zero. The first item in the list has an index of zero, the second item has an index of one, and so on.

[source,python]
----
List : [ 1,  2,  3,  4 ]
         ^   ^   ^   ^
Index :  0   1   2   3
----

To find out what item is stored at a certain index, you put the index in brackets after the variable name. It looks like this:

[source,python]
----
>>> colors = ["red", "yellow", "blue"]
>>> print colors[0]
red
>>> print colors[1]
yellow
----

You can also use the index to change what's been stored at a certain index. Here, we're going to switch "blue" for "turquoise".

[source,python]
----
>>> colors = ["red", "yellow", "blue"]
>>> colors[2] = "turquoise"
>>> print colors
['red', 'yellow', 'turquoise']
----

Now, instead of holding 'blue', the last item in `colors` is turquoise.

==== Addding items to a list

We can also add items to a list. This is a good thing, too, since a list isn't much good if we can't add to it!

To add an item to a list, we use `append()`. `append()` is tacked onto the end of the list we want to add to, and we put the item we want to add in the parenthesis. It looks like this:

[source,python]
----
>>> colors = ["red", "yellow", "blue"]
>>> colors.append("violet")
>>> colors
['red', 'yellow', 'blue', 'violet']
----

When you use `append()`, the item you want to add gets added to the end of the list. What if you wanted to insert an item into a list, though? Let's say we want to add "orange" to our list, but we want it to go in its proper place: between "red" and "yellow". To do that, we use `insert()`.

`insert()` works almost like `append()`, but it takes two values: 

* The index where you want to insert the item
* The item you want to insert

Using `insert()` looks like this:

[source,python]
----
mylist.insert(index, new_value)
----

In order to use `insert()`, you have to figure out _where_ you want to insert your item. Here's our list of colors:

[source, python]
----
['red', 'yellow', 'blue']
----

We want "orange" to be after "red". "red" is at index zero, so "orange" should be at index one.

Now that we've sorted out where we want to put orange, we can use `insert()` to update our list:

[source, python]
----
>>> colors = ["red", "yellow", "blue"]
>>> colors.insert(1, "orange")
>>> colors
['red', 'orange', 'yellow', 'blue']
----

Now, "orange" is between "red" and "yellow", right where it should be!

==== Removing values from a list

Sometimes, you want to remove an item from a list completely. Maybe you're done with that task, or you realize you added an item one too many times. To remove an item from a list, we use `pop()`.

To use `pop()`, we need to know exactly what item we want Python to remove from our list. In order to be super crystal clear about what we want to do, Python needs the index of the item we want to trash. Using `pop()` looks like this:

[source,python]
----
>>> colors = ["red", "yellow", "blue", "apple"]
>>> colors.pop(3)
>>> colors
['red', 'yellow', 'blue']
----

Above, I accidentally added something that wasn't a color ("apple"), so I removed it by using `pop()` and its index (which was three). 

==== Lists and loops!

Lists are already pretty great. Grouping items is incredibly useful, making it so that you have fewer variables to keep track of as you code. Where they really shine, though, is when you pair them with `for` loops.

In the loops lesson, we learned about repeating code a block of code a certain number of times by using `range()`. If we pair a `for` loop with a list, though, we can run a block of code for every item in the list.

Using a list with a `for` loop looks like this:

[source,python]
----
for item in my_list:
    code
    code
    code
----

Python starts with the first item in the list, runs the code in the code block. Once that code is done, Python does the same thing with the second item in the list, and so on, until it runs out of items.

Let's use a list with a `for` loop to see how this works. We're going to create a list of animals, then talk about how much we like them.

[source,python]
----
animals = ['dog', 'cat', 'pig', 'goose', 'emu']

for animal in animals:
    print "I love my", animal
----

Run the code, and watch what's printed out. Every time the `for` loop runs, Python takes one of the animals and stores it into the loop variable `animal`, then runs the code in the block. Once that code is run, Python moves on to the next animal, and so on.

=== Dictionaries

In the real world, a dictionary is a book that has a bunch of words paired with their definitions. In Python, dictionaries are filled with key / value pairs. They're great for when you want to pair one piece of information to another, like pairing names with birthdates, items with prices, or video games with genres.

==== Keys and values

Dictionaries are made of key / value pairs. Each key is paired up with one value. 

In dictionaries, keys are unique. So, in your dictionary, you can only use a key once. Also, you can only use certain data types as keys. In general, I like to stick to strings or integers as my keys, since other data types can either cause errors, or might cause Python to start acting weird.

==== Creating a dictionary

Dictionaries have some important differences from lists. First, dictionaries are surrounded by curly braces ({ }). These are _above_ the square brackets on your keyboard. Second, keys and values are separated by a colon, and key / value pairs are separated by a comma. A dictionary might look something like this:

[source,python]
----
my_dict = {key: value, key2: value}
----

You can also break up a dictionary onto several lines, if you want. I do this, because it makes it much easier to read.

[source,python]
----
my_dict = {key: value, 
           key2: value}
----

Let's make a dictionary. In this dictionary, we're going to pair a pet's name with what kind of animal they are.

[source,python]
----
pets = {'Gizmo': 'dog',
        'Coe': 'fish',
        'Niko': 'cat'}
----

To get a value out of a dictionary, you use the key that's paired with it. It looks a bit like using a list, but instead of a index, you're using another value.

Let's find out what kind of animal Gizmo is.

[source,python]
----
>>> pets = {'Gizmo': 'dog',
        'Coe': 'fish',
        'Niko': 'cat'}
>>> print pets['Gizmo']
dog
----

Note that we use the _key_. If we try to use a value, we're going to get an error.

[source,python]
----
>>> pets = {'Gizmo': 'dog',
        'Coe': 'fish',
        'Niko': 'cat'}
>>> pets['dog']
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
KeyError: 'dog'
----

Now that we know how to make a dictionary, let's make some changes to it.

==== Adding values to a dictionary

You don't need anything special to add a value to dictionary. Just give the dictionary the key you want to use, and tell it what value you want it to save.

Let's add another pet to our menagerie.

[source,python]
----
>>> pets = {'Gizmo': 'dog',
        'Coe': 'fish',
        'Niko': 'cat'}
>>> pets['Hannah'] = "kindergartener"
>>> print pets
{'Hannah': 'kindergartener', 'Coe': 'fish', 'Niko': 'cat', 'Gizmo': 'dog'}
----

When we check to see see what's in `pets` now, we see that Hannah the kindergartener has been added!

==== Changing values in a dictionary

My son saw my dictionary and pointed out that Hannah will only be a kindergartener for so long. It would be better if we referred to her as a 'grade schooler.' Here's how we would change the value paired with 'Hannah':

[source,python]
---- 
>>> pets = {'Hannah': 'kindergartener', 'Coe': 'fish', 'Niko': 'cat', 'Gizmo': 'dog'}
>>> pets['Hannah'] = 'grade schooler'
>>> pets
{'Hannah': 'grade schooler', 'Coe': 'fish', 'Niko': 'cat', 'Gizmo': 'dog'}
----

Now, instead of being a kindergartener, Hannah is now a 'grade schooler.'

==== Removing values from a list

Eventually, Hannah hears of this list and protests. She is *not* a pet! She's a human! She wants *off* of that list! We can remove her by using `pop()` and the key we want to remove.

[source,python]
----
>>> print pets
{'Hannah': 'kindergartener', 'Coe': 'fish', 'Niko': 'cat', 'Gizmo': 'dog'}
>>> pets.pop('Hannah')
'kindergartener'
>>> print pets
{'Coe': 'fish', 'Niko': 'cat', 'Gizmo': 'dog'}
----

Now, Hannah is no longer on the list, even though she can be a bit wild sometimes. 

One thing to note: When you use `pop()`, Python gives you the value associated with that key. You don't need to do anything with it if you want. If you don't save it to a variable, it just goes away.

==== Getting all the keys (or values!)

Dictionaries come with two really neat tricks: You can get a list of all the keys or values in a dictionary! 

To get all of the keys in a dictionary, use `keys()`. 

[source,python]
----
>>> pets.keys()
['Coe', 'Niko', 'Gizmo']
----

To get all of the values that are in a dictionary, use `values()`:

[source,python]
----
>>> pets.values()
['fish', 'cat', 'dog']
----

Getting all of the keys or values out of a dictionary can be helpful when you need to search for an item, or do something with that list. Just remember that changing that list doesn't change your dictionary!

==== Dictionaries and loops!

Just like lists, you can use dictionaries with `for` loops. First, take a look at this code and guess what is going to be printed out. Then run the code, and see if you were right.

[source,python]
----
inventory = {'apples': 5,
             'pears': 7,
             'grapes': 10,
             'kiwi': 0}

for item in inventory:
    print "We have", item
----

When you run the code, you should see something like this:

[source,python]
----
We have grapes
We have kiwi
We have apples
We have pears
----

So, when you use a dictionary and a `for` loop, the `for` loop runs through each of the keys in the dictionary. If you want, you can use the key to get the value out of the dictionary.

[source,python]
----
inventory = {'apples': 5,
             'pears': 7,
             'grapes': 10,
             'kiwi': 0}

for item in inventory:
    print "We have {} {}".format(inventory[item], item)
----

Run the code and see what happens now!

=== Try this!

Try creating a dictionary of your favorite books. What do you think should be the key: The title, or the author? Discuss your reasoning with your mentor.