== Using modules

One of my main jobs as a programmer is to figure out how to write less code. 

If someone else has done something similar, then it only makes sense to use their code rather than duplicate all of their effort. In the Python community, we often will put up code that helped us in our job for others to use. Most of the time, we don't even charge for it! 

Python comes with a large library of code that other people have written, just to make your life a bit easier. It's well worth the time and energy to get to know what's in this library so that you can start making awesome things sooner.

=== What you'll need to know...

=== A note for the mentor

In this lesson, we're going to *finally* get to modules. 

This is one of the lessons that I find to be the easiest to teach. Students do not mind being shown a shortcut. This is also one of those places where their programs really start to bloom. Feel free to show off your favorite modules, or take an hour to search for modules to help them do what they want to do. If you want more of a guided tour, check out the modules and frameworks appendix.

So buckle up! This should be a fun ride!

=== What's a module?

A module is nothing more than a file that has a bunch of code that you want to import into your code. Once you import a module, you can use everything in it just like you had written the code yourself.

Importing a module usually looks like one of these lines:

[source,python]
----
import module
from module import thing
----

Why import three different ways? Because sometimes you want just a few things, and sometimes you want it all.

If you do `import module`, then Python will import all the things in that module into your program. It might be five things. It might be twenty things. You'll be getting them all, though.

If you use this method, then your code would look something like this:

[source,python]
----
import module

module.thing()
----

If you just want to bring in one thing, then you can do `from module import thing`. Then, your code would look something like this:

[source,python]
----
from module import thing

thing()
----

Notice how we didn't have to say `module.thing()`? We can just use `thing` on its own.

=== Why use them?

The most important reason to use them is that it saves you time. At least, that's the first reason _I_ use modules. I don't want to spend weeks trying to write code that someone else has written! Many of these modules took a long time to write, as well as a crazy amount of expertise.

That brings us to another reason to use modules: Usually, experts wrote them. It's harder than you think to create random numbers, or get Python to spit out a web page. The people who wrote these modules are usually experts in these fields, and the code gets reviewed by other experts.

Another good reason to use modules: They're maintained. Over time, other people in the community will improve the modules so that they run faster, or they fix security issues. Even if you think you might be able to build your own module, you're probably better off using something that everyone wants to keep running.

Finally, they make your code so much easier to maintain. If you need to share your code with someone else, it's likely that they're going to be pretty familiar with how `random()` works. If they don't know, they can just do an Internet search! Can you say as much for your code?

If you think you'll never share your code with anyone else, remember one thing: Future You is a person, too. Chances are good that you'll come back to your code one day, either to change how it works, or remember how you did a cool thing. Be kind to Future You, and write code that's easy to maintain.

Now that you know why you should use modules, let's learn about a few!

=== Random

If you want to make games, chances are, you're going to need get something random at some point. You might want to get a figure out how much damage a monster does, or pick a random piece of treasure, or simply arrange a board in a random manner.

[[random_in_dungeon]]
.It wouldn't be much of a dungeon if nothing random happened.
image::images/randomindungeon.png["A heroine gets bit by a dragon, finds a treasure, and looks at a number puzzle."]

==== Getting random numbers

==== Getting random items

=== Datetime

==== Getting the current time

==== Creating a date

==== Time math

=== os

==== Moving around your computer

==== Getting a list of files in a directory

==== Make a new directory

=== Turtles!

==== Creating a turtle

==== Moving it around

=== Making your own module

==== Organizing your module

==== Installing your module!

=== Try this!
